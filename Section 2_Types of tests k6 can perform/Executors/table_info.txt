Executor                 | Description                                                                                   | Purpose                                                                                  | k6 Code Example                                                                                                           | Usage Model                                                                                                       
-------------------------|-----------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------
shared-iterations        | Runs a fixed number of iterations shared among a fixed number of VUs.                          | Best for running a specific number of requests in a controlled manner.                   | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'shared-iterations',<br> vus: 10,<br> iterations: 100,<br> maxDuration: '30s',<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Closed Model: Iterations are shared among the VUs; each VU completes its share of iterations.               
per-vu-iterations        | Runs a fixed number of iterations for each VU.                                                 | Ensures each VU runs the same number of iterations.                                      | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'per-vu-iterations',<br> vus: 10,<br> iterations: 10,<br> maxDuration: '1m',<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Closed Model: Each VU runs the specified number of iterations, regardless of other VUs.                      
constant-vus             | Keeps a fixed number of VUs running for a specified duration.                                  | Simulates a steady load.                                                                 | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'constant-vus',<br> vus: 10,<br> duration: '30s',<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Open Model: VUs keep executing iterations continuously for the specified duration.                            
ramping-vus              | Gradually ramps VUs up or down based on a defined schedule.                                    | Simulates gradual load increase or decrease.                                             | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'ramping-vus',<br> stages: [<br> { duration: '10s', target: 10 },<br> { duration: '20s', target: 20 },<br> { duration: '10s', target: 0 },<br> ],<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Open Model: VUs ramp up or down according to the defined stages, adjusting load over time.                    
ramping-arrival-rate     | Adjusts the arrival rate of iterations per time unit, simulating varying load intensity over time. | Controls the rate of requests over time rather than VU count.                           | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'ramping-arrival-rate',<br> startRate: 10,<br> timeUnit: '1m',<br> preAllocatedVUs: 20,<br> maxVUs: 50,<br> stages: [<br> { duration: '10m', target: 100 },<br> { duration: '20m', target: 200 },<br> { duration: '10m', target: 50 },<br> ],<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Open Model: Controls the rate at which new iterations start, making it more predictable and consistent than VU-based tests.
constant-arrival-rate    | Keeps a constant arrival rate of iterations for a specified time.                             | Useful for ensuring a specific number of requests per second.                            | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'constant-arrival-rate',<br> rate: 10,<br> timeUnit: '1s',<br> duration: '1m',<br> preAllocatedVUs: 20,<br> maxVUs: 100,<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Open Model: Ensures a constant rate of new iterations regardless of the number of VUs needed.               
externally-controlled    | Allows an external system to control the number of active VUs.                                  | Provides flexibility for integrating with external controllers.                          | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'externally-controlled',<br> vus: 10,<br> maxDuration: '5m',<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Open Model: Allows dynamic adjustment of load based on external signals during the test.                               
per-vu-arrival-rate      | Runs a fixed number of iterations per VU at a specified arrival rate.                           | Ensures consistent load from each VU over time.                                          | import http from 'k6/http';<br><br>export const options = {<br> scenarios: {<br> my_scenario: {<br> executor: 'per-vu-arrival-rate',<br> rate: 10,<br> timeUnit: '1m',<br> preAllocatedVUs: 20,<br> maxVUs: 50,<br> duration: '30m',<br> },<br> },<br>};<br><br>export default function () {<br> http.get('https://example.com');<br>}``` | Closed Model: Each VU maintains a consistent rate of iterations, allowing fine control over individual VU performance.